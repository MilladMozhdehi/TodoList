{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoItem.js","components/TodoItems.js","components/TodoEntry.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","observable","action","todoStore","all","active","com","lastID","todos","push","filter","todo","index","_this","findIndex","item","splice","_this2","_this3","_this4","_this5","computed","TodoItem","observer","onToggle","props","toggle","react_default","a","createElement","className","onChange","type","value","checked","src","onClick","event","deleteTodo","Component","TodoItems","remainingTodo","length","onClear","clearTodo","todosFilter","map","components_TodoItem","key","filterUpdate","filterActiveUpdate","filterComUpdate","style","cursor","TodoEntry","state","handleKeyDown","keyCode","preventDefault","addTodo","setState","target","onKeyDown","placeholder","components_TodoItems","App","components_TodoEntry","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.306d99bf.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\n\nexport default class TodoModel {\n  store;\n  id;\n  @observable title;\n  @observable completed;\n\n  constructor(store, title, completed, id) {\n    this.id = id;\n    this.title = title;\n    this.completed = completed;\n    this.store = store;\n  }\n\n  @action\n  toggle() {\n    this.completed = !this.completed;\n  }\n}\n","import { observable, action, computed } from \"mobx\";\nimport TodoModel from \"./TodoModel\";\n\nclass TodoStore {\n  @observable todos = [];\n  @observable filter = \"all\";\n  all = \"all\";\n  active = \"active\";\n  com = \"completed\";\n  lastID = 1;\n\n  @action\n  addTodo(title) {\n    this.todos.push(new TodoModel(this, title, false, this.lastID++));\n  }\n\n  @action\n  deleteTodo = (id) => {\n    const index = this.todos.findIndex((item) => item.id === id);\n    this.todos.splice(index, 1);\n  };\n\n  @action\n  clearTodo = () => {\n    this.todos = this.todos.filter((todo) => !todo.completed);\n  };\n\n  @action\n  filterUpdate = () => {\n    this.filter = this.all;\n  };\n\n  @action\n  filterActiveUpdate = () => {\n    this.filter = this.active;\n  };\n\n  @action\n  filterComUpdate = () => {\n    this.filter = this.com;\n  };\n\n  @computed get todosFilter() {\n    if (this.filter === \"all\") {\n      return this.todos;\n    } else if (this.filter === \"active\") {\n      return this.todos.filter((todo) => !todo.completed);\n    } else if (this.filter === \"completed\") {\n      return this.todos.filter((todo) => todo.completed);\n    }\n    return this.todos;\n  }\n}\n\nconst todoStore = new TodoStore();\nexport default todoStore;\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n  onToggle = () => {\r\n    this.props.todo.toggle();\r\n  };\r\n\r\n  render() {\r\n    const { todo } = this.props;\r\n    return (\r\n      <li className={todo.completed ? \"completed\" : \"\"}>\r\n        <div className=\"view\">\r\n          <input\r\n            onChange={this.onToggle}\r\n            className=\"toggle\"\r\n            type=\"checkbox\"\r\n            value=\"on\"\r\n            checked={todo.completed}\r\n          />\r\n          <label>{todo.title}</label>\r\n          <div className=\"closebut\">\r\n            <img\r\n              src=\"./image/close.png\"\r\n              className=\"closeicon\"\r\n              onClick={(event) => todoStore.deleteTodo(this.props.todo.id)}\r\n            />\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n  remainingTodo = () => {\r\n    return todoStore.todos.filter((todo) => !todo.completed).length;\r\n  };\r\n\r\n  onClear = () => {\r\n    todoStore.clearTodo();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <footer className=\"main\">\r\n          <ul className=\"todo-list\">\r\n            {todoStore.todosFilter.map((todo, index) => {\r\n              return <TodoItem key={todo.id} todo={todo} />;\r\n            })}\r\n          </ul>\r\n        </footer>\r\n        <div className=\"myitem\">\r\n          <div className=\"remain\">{this.remainingTodo()} items left</div>\r\n          <div className=\"update\">\r\n            <input\r\n              type=\"button\"\r\n              value=\"All\"\r\n              onClick={() => todoStore.filterUpdate()}\r\n              className=\"but\"\r\n            />\r\n            <input\r\n              type=\"button\"\r\n              value=\"Active\"\r\n              onClick={() => todoStore.filterActiveUpdate()}\r\n              className=\"but\"\r\n            />\r\n            <input\r\n              type=\"button\"\r\n              value=\"Completed\"\r\n              onClick={() => todoStore.filterComUpdate()}\r\n              className=\"but\"\r\n            />\r\n          </div>\r\n          <div className=\"cls\">\r\n            <input type=\"button\" value=\"Clear Completed\" onClick={todoStore.clearTodo} style={{cursor:\"pointer\"}}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItems;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport TodoItems from \"./TodoItems\";\r\n\r\nclass TodoEntry extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  handleKeyDown = (event) => {\r\n    if (event.keyCode !== 13) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    todoStore.addTodo(this.state.value);\r\n    this.setState({\r\n      value: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <h1>ToDo</h1>\r\n          <input\r\n            value={this.state.value}\r\n            onChange={(event) => this.setState({ value: event.target.value})}\r\n            onKeyDown={(event) => this.handleKeyDown(event)}\r\n            type=\"text\"\r\n            placeholder=\"What needs to be done?\"\r\n            className=\"new-todo\"\r\n          />\r\n        </header>\r\n        <TodoItems />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoEntry;\r\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport \"./App.css\";\nimport todoStore from \"./stores/TodoStore\";\nimport TodoEntry from \"./components/TodoEntry\";\n\n@observer\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <TodoEntry />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}